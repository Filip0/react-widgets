{"version":3,"sources":["webpack:///webpack/bootstrap 9836abbeb8745cf94029","webpack:////home/filip/code/packages/react-widgets/~/deconstruct-number-format/index.js","webpack:///./localizer.js","webpack:////home/filip/code/packages/react-widgets/~/format-number-with-string/index.js","webpack:////home/filip/code/packages/react-widgets/~/format-number/index.js","webpack:////home/filip/code/packages/react-widgets/tools/shim.js","webpack:///external \"window.ReactWidgets\""],"names":["simpleNumber","defaults","decimal","grouping","options","localizer","formats","default","parse","value","culture","format","data","negative","negativeLeftSymbol","indexOf","negativeRightSymbol","replace","prefix","suffix","halves","split","decimalChar","integerSeperator","RegExp","decimalsSeparator","pop","join","parseFloat","isNaN","precision","maxRight","setNumberLocalizer","module"],"mappings":";;AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA,mDAA2C,cAAc;;AAEzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;;AChEA;;;AAGA;;;AAGA;;AAEA,uBAAuB;;AAEvB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;;AAEA,GAAG;AACH;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,6HAA6H;;AAE7H;AACA;AACA;;AAEA;AACA;AAC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CA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,sDAAsD,4BAA4B,EAAE;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,8BAA8B;AACnD;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,sBAAsB,EAAE;AACxB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB,EAAE;AACnB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD;AACxD,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC9PA,IAAI,OAAO4B,MAAP,KAAkB,UAAtB,EAAkC;AAChCA;AACD,C;;;;;;;ACFD,qC","file":"react-widgets-simple-number.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 9836abbeb8745cf94029","'use strict';\r\n\r\n\r\nexports = module.exports = function deconstructNumberFormat(requiredFormat) {\r\n\r\n\r\n  var format= requiredFormat || '-9,999.90';\r\n\r\n  format=format.trim(); //ignore leading and trailing spaces\r\n  \r\n  // *********************************************************************************\r\n  // find position and type of negative and contents of prefix and suffix text\r\n  // *********************************************************************************\r\n  \r\n  var negativeType = '', negativeRightSymbol = '', negativeLeftSymbol = '',\r\n      negativeRightPos = -1, negativeLeftPos = -1, \r\n      absFormat,\r\n      prefix = '', suffix = '';\r\n  \r\n  // brackets as negative\r\n  if (/^([^()]+)?[(]([^09#]+)?[09#., ]+([^)]+)?[)](.+)?$/.test(format)) {\r\n    negativeType = 'brackets';\r\n    negativeLeftPos = format.indexOf(\"(\");\r\n    negativeLeftSymbol = '('\r\n    if (negativeLeftPos > 0) { //after prefix\r\n      prefix = format.slice(0, negativeLeftPos);\r\n    } else {\r\n      prefix = format.search(/0|9|#/) > 0 ? format.slice(1, format.search(/0|9|#/)) : \"\";\r\n    }\r\n    format = format.slice(prefix.length+1);\r\n\r\n    negativeRightPos = format.indexOf(\")\");\r\n    negativeRightSymbol = ')'\r\n    if (negativeRightPos < format.length-1) { //before prefix\r\n      suffix = format.slice(negativeRightPos+1);\r\n      format = format.slice(0, negativeRightPos);\r\n    } else {\r\n      suffix = format.search(/[^09#,.]([^09#](.+)?)?[)]$/) > -1  ? format.slice(format.search(/[^09#,.]([^09#](.+)?)?[)]$/), -1) : \"\";\r\n      format = format.slice(0, format.length - suffix.length - 1);\r\n      negativeRightPos = 0;\r\n    }\r\n\r\n  } else if (format.indexOf(\"-\") === -1){\r\n    //positive values only\r\n    negativeType = 'none';\r\n    prefix = format.search(/[.,]?[09#]/) > 0 ? format.slice(0, format.search(/[.,]?[09#]/)) : \"\";\r\n    format = format.slice(prefix.length);\r\n    suffix = format.search(/[^09#,.]([^09#]+|$)/) > -1  ? format.slice(format.search(/[^09#,.]([^09#]+|$)/)) : \"\";\r\n    format = format.slice(0, format.length-suffix.length);\r\n\r\n  } else if (/^([^09#-]+)?-.+$/.test(format)) {\r\n    //negative symbol to left of number (before or after prefix)\r\n    negativeType = 'left';\r\n    negativeLeftPos = format.indexOf(\"-\");\r\n    negativeLeftSymbol = '-'\r\n    if (negativeLeftPos > 0) { //after prefix\r\n      prefix = format.slice(0, negativeLeftPos);\r\n    } else {\r\n      prefix = format.search(/[09#]/) > 0 ? format.slice(1, format.search(/[09#]/)) : \"\";\r\n    }\r\n    format = format.slice(prefix.length+1);\r\n    suffix = format.search(/[^09#,.]([^09#]+|$)/) > -1  ? format.slice(format.search(/[^09#,.]([^09#]+|$)/)) : \"\";\r\n    format = format.slice(0, format.length-suffix.length);\r\n\r\n  } else {\r\n    //negative symbol to right of number (before or after suffix)\r\n    prefix = format.search(/[09#]/) > 0 ? format.slice(0, format.search(/[09#]/)) : \"\";\r\n    format = format.slice(prefix.length);\r\n    negativeType = 'right';\r\n    negativeRightSymbol = '-'\r\n    negativeRightPos = format.lastIndexOf(\"-\");\r\n    if (negativeRightPos < format.length-1) { //before suffix\r\n      suffix = format.slice(negativeRightPos+1);\r\n      format = format.slice(0, negativeRightPos);\r\n    } else {\r\n      suffix = format.search(/[^09#,.]([^09#](.+)?)?-$/) > -1  ? format.slice(format.search(/[^09#,.]([^09#](.+)?)?-$/), format.length-1) : \"\";\r\n      format = format.slice(0, format.length - suffix.length - 1);\r\n      negativeRightPos = 0;\r\n    }\r\n  }\r\n\r\n  // *********************************************************************************\r\n  //include spaces with negative symbols\r\n  // *********************************************************************************\r\n\r\n  //When negative is before prefix move spaces from start of prefix to end of negative symbol\r\n  while (negativeLeftPos === 0 && prefix && prefix[0] === ' ') {\r\n    negativeLeftSymbol = negativeLeftSymbol + ' ';\r\n    prefix = prefix.slice(1);\r\n  }\r\n\r\n  //When negative follows suffix move spaces end of suffix to start of negative symbol\r\n  while (negativeRightPos === 0 && suffix && suffix[suffix.length-1] === ' ') {\r\n    negativeRightSymbol = ' ' + negativeRightSymbol;\r\n    suffix = suffix.slice(0, -1);\r\n  }\r\n\r\n  //When negative follows prefix move spaces from start of format to end of negative symbol\r\n  while (negativeLeftPos > 0 && format.length && format[0] === ' ') {\r\n    negativeLeftSymbol = negativeLeftSymbol + ' ';\r\n    format = format.slice(1);\r\n  }\r\n\r\n  //When negative before suffix move spaces from end of format to start of negative symbol\r\n  while (negativeRightPos > 0 && format.length && format[format.length-1] === ' ') {\r\n    negativeRightSymbol = ' ' + negativeRightSymbol;\r\n    format = format.slice(0, -1);\r\n  }\r\n\r\n  var absMask = format;\r\n\r\n  // *********************************************************************************\r\n  //find the decimal character and parts of absolute format\r\n  // *********************************************************************************\r\n\r\n  var decimalChar = '', decimalsPart = '', integerPart = '', decimalsSeparator = '', integerSeparator = '';\r\n\r\n  //if last char is a ',' and there are no other commas then use this as decimal point\r\n  if (format[format.length-1] === ',' && format.indexOf(',') === format.length-1) {\r\n    decimalChar = ',';\r\n  //otherwise use consider '.'\r\n  } else if (format.indexOf('.') > -1) {\r\n    if (format.indexOf('.') === format.lastIndexOf('.')) {\r\n      decimalChar = \".\";\r\n    } else {\r\n      // two of '.' means this must be the separator, so assume  ',' is the decimal\r\n      decimalChar = ',';\r\n    }\r\n  //otherwise use ',' if it exists and there is only one\r\n  } else if (format.indexOf(',') > -1) {\r\n    if (format.indexOf(',') === format.lastIndexOf(',')) {\r\n      decimalChar = ',';\r\n    } else {\r\n      decimalChar = '.';\r\n    }\r\n  }\r\n\r\n  if (decimalChar && format.indexOf(decimalChar)>-1) {\r\n    decimalsPart = format.slice(format.indexOf(decimalChar)+1);\r\n    integerPart = format.slice(0,format.indexOf(decimalChar));\r\n  } else {\r\n    integerPart = format;\r\n    decimalsPart = '';\r\n  }\r\n\r\n  while (decimalsPart.length && decimalsPart.search(/[., ]$/) > -1) {\r\n    decimalsPart = decimalsPart.slice(0, -1);\r\n  }\r\n\r\n  while (integerPart.length && integerPart[0].search(/[., ]/) > -1) {\r\n    integerPart = integerPart.slice(1);\r\n  }\r\n\r\n  //find the thousands/thousanths separators\r\n  if (integerPart && integerPart.search(/[., ]/) > 0) {\r\n    integerSeparator = integerPart[integerPart.search(/[., ]/)];\r\n    integerPart = integerPart.replace(/[., ]/g, \"\");\r\n  }\r\n\r\n  if (decimalsPart && decimalsPart.search(/[., ]/) > 0) {\r\n    decimalsSeparator = decimalsPart[decimalsPart.search(/[., ]/)];\r\n    decimalsPart = decimalsPart.replace(/[., ]/g, \"\");\r\n  }\r\n\r\n  if ((integerPart.length && !(/^[09#]+$/).test(integerPart)) || (decimalsPart.length && !(/^[09#]+$/).test(decimalsPart))) {return false};\r\n\r\n  // *********************************************************************************\r\n  //resolve length and padding\r\n  // *********************************************************************************\r\n\r\n  var padLeft, maxLeft, padRight, maxRight;\r\n  padLeft = integerPart.indexOf(\"0\") >= 0 ? integerPart.length - integerPart.indexOf(\"0\") : -1;\r\n  maxLeft = integerPart.length === 0 ||integerPart[0] === \"0\" || integerPart[0] === \"9\" ? integerPart.length : -1;\r\n  padRight = decimalsPart.indexOf(\"0\") >= 0 ? decimalsPart.lastIndexOf(\"0\")+1 : -1;\r\n  maxRight = decimalsPart.length === 0 || decimalsPart[decimalsPart.length-1] === \"0\" || decimalsPart[decimalsPart.length-1] === \"9\" ? decimalsPart.length : -1;\r\n\r\n  // *********************************************************************************\r\n  // output\r\n  // *********************************************************************************\r\n\r\n  var deconstructedFormat = {\r\n    negativeType: negativeType,\r\n    negativeLeftPos: negativeLeftPos,\r\n    negativeRightPos: negativeRightPos,\r\n    negativeLeftSymbol: negativeLeftSymbol,\r\n    negativeRightSymbol: negativeRightSymbol,\r\n    suffix: suffix,\r\n    prefix: prefix,\r\n    absMask: absMask,\r\n    decimalChar: decimalChar,\r\n    integerSeparator: integerSeparator,\r\n    decimalsSeparator: decimalsSeparator,\r\n    padLeft: padLeft,\r\n    maxLeft: maxLeft,\r\n    padRight: padRight,\r\n    maxRight: maxRight\r\n  }\r\n\r\n  return deconstructedFormat;\r\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/filip/code/packages/react-widgets/~/deconstruct-number-format/index.js\n// module id = 0\n// module chunks = 0","import configure from 'react-widgets/lib/configure';\nimport formatNumber from 'format-number-with-string';\nimport deconstruct from 'deconstruct-number-format';\n\nlet defaults = {\n  decimal: '.',\n  grouping: ','\n}\n\nexport default function simpleNumber(options = {}) {\n  let { decimal, grouping } = { ...defaults, ...options }\n\n  let localizer = {\n    formats: {\n      default: `-#${grouping}##0${decimal}`\n    },\n\n    // TODO major bump consistent ordering\n    parse(value, culture, format) {\n      if (format) {\n        let data = deconstruct(format)\n          , negative = (data.negativeLeftSymbol && value.indexOf(data.negativeLeftSymbol) !== -1)\n                    || (data.negativeRightSymbol && value.indexOf(data.negativeRightSymbol) !== -1)\n\n        value = value\n          .replace(data.negativeLeftSymbol, '')\n          .replace(data.negativeRightSymbol, '')\n          .replace(data.prefix, '')\n          .replace(data.suffix, '')\n\n        let halves = value.split(data.decimalChar)\n\n        if (data.integerSeperator)\n          halves[0] = halves[0].replace(new RegExp('\\\\' + data.integerSeperator, 'g'))\n\n        if (data.decimalsSeparator)\n          halves[1] = halves[1].replace(new RegExp('\\\\' + data.decimalsSeparator, 'g'))\n\n        if (halves[1] === '') halves.pop();\n\n        value = halves.join('.')\n        value = +value\n\n        if (negative)\n          value = -1 * value\n      }\n      else\n        value = parseFloat(value)\n\n      return isNaN(value) ? null : value\n    },\n\n    format(value, format) {\n      return formatNumber(value, format)\n    },\n\n    decimalChar(format) {\n      return format && deconstruct(format).decimalsSeparator || '.'\n    },\n\n    precision(format) {\n      let data = deconstruct(format)\n      return data.maxRight !== -1 ? data.maxRight : null\n    }\n  }\n\n  configure.setNumberLocalizer(localizer)\n  return localizer\n}\n\n\n\n// WEBPACK FOOTER //\n// ./localizer.js","'use strict';\r\n\r\nvar deconstructNumberFormat = require('deconstruct-number-format');\r\nvar formatFactory = require('format-number');\r\n\r\nexports = module.exports = function formatNumberWithString(value, requiredFormat, overrideOptions) {\r\n\r\n  var deconstructedFormat = []\r\n\r\n  if (requiredFormat) deconstructedFormat = deconstructNumberFormat(requiredFormat.trim());\r\n  \r\n  value = (value === null ? '' : value);\r\n  value = value + ''; //make a string\r\n  value = value.length ? value.trim() : '';\r\n  \r\n  var options = [];\r\n  \r\n  var format = formatFactory({\r\n    negativeType: deconstructedFormat.negativeType,\r\n    negativeLeftSymbol: deconstructedFormat.negativeLeftSymbol,\r\n    negativeRightSymbol: deconstructedFormat.negativeRightSymbol,\r\n    negativeLeftOut: deconstructedFormat.negativeLeftPos === 0,\r\n    negativeRightOut: deconstructedFormat.negativeRightPos === 0,\r\n    prefix: deconstructedFormat.prefix,\r\n    suffix: deconstructedFormat.suffix,\r\n    integerSeparator: deconstructedFormat.integerSeparator,\r\n    decimalsSeparator: deconstructedFormat.decimalsSeparator,\r\n    decimal: deconstructedFormat.decimalChar,\r\n    padLeft: deconstructedFormat.padLeft,\r\n    padRight: deconstructedFormat.padRight,\r\n    round: deconstructedFormat.maxRight,\r\n    truncate: null\r\n  })\r\n\r\n  return format(value, overrideOptions);\r\n\r\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/filip/code/packages/react-widgets/~/format-number-with-string/index.js\n// module id = 2\n// module chunks = 0","\nmodule.exports = formatter;\n\nfunction formatter(options) {\n  options = options || {};\n\n\n  // *********************************************************************************************\n  // Set defaults for negatives\n  // options.negative, options.negativeOut, options.separator retained for backward compatibility\n  // *********************************************************************************************\n\n  // type of negative; default left\n  options.negativeType = options.negativeType || (options.negative === 'R' ? 'right' : 'left')\n\n  // negative symbols '-' or '()'\n  if (typeof options.negativeLeftSymbol !== 'string') {\n    switch (options.negativeType) {\n      case 'left':\n        options.negativeLeftSymbol = '-';\n        break;\n      case 'brackets':\n        options.negativeLeftSymbol = '(';\n        break;\n      default:\n        options.negativeLeftSymbol = '';\n    }\n  }\n  if (typeof options.negativeRightSymbol !== 'string') {\n    switch (options.negativeType) {\n      case 'right':\n        options.negativeRightSymbol = '-';\n        break;\n      case 'brackets':\n        options.negativeRightSymbol = ')';\n        break;\n      default:\n        options.negativeRightSymbol = '';\n    }\n  }\n\n  // whether negative symbol should be inside/outside prefix and suffix\n\n  if (typeof options.negativeLeftOut !== \"boolean\") {\n    options.negativeLeftOut = (options.negativeOut === false ? false : true);\n  }\n  if (typeof options.negativeRightOut !== \"boolean\") {\n    options.negativeRightOut = (options.negativeOut === false ? false : true);\n  }\n\n  //prefix and suffix\n  options.prefix = options.prefix || '';\n  options.suffix = options.suffix || '';\n\n  //separators\n  if (typeof options.integerSeparator !== 'string') {\n    options.integerSeparator = (typeof options.separator === 'string' ? options.separator : ',');\n  }\n  options.decimalsSeparator = typeof options.decimalsSeparator === 'string' ? options.decimalsSeparator : '';\n  options.decimal = options.decimal || '.';\n\n  //padders\n  options.padLeft = options.padLeft || -1 //default no padding\n  options.padRight = options.padRight || -1 //default no padding\n\n  function format(number, overrideOptions) {\n    overrideOptions = overrideOptions || {};\n\n    if (number || number === 0) {\n      number = '' + number;//convert number to string if it isn't already\n    } else {\n      return '';\n    }\n\n    //identify a negative number and make it absolute\n    var output = [];\n    var negative = number.charAt(0) === '-';\n    number = number.replace(/^\\-/g, '');\n\n    //Prepare output with left hand negative and/or prefix\n    if (!options.negativeLeftOut && !overrideOptions.noUnits) {\n      output.push(options.prefix);\n    }\n    if (negative) {\n      output.push(options.negativeLeftSymbol);\n    }\n    if (options.negativeLeftOut && !overrideOptions.noUnits) {\n      output.push(options.prefix);\n    }\n\n    //Format core number\n    number = number.split('.');\n    if (options.round != null) round(number, options.round);\n    if (options.truncate != null) number[1] = truncate(number[1], options.truncate);\n    if (options.padLeft > 0) number[0] = padLeft(number[0], options.padLeft);\n    if (options.padRight > 0) number[1] = padRight(number[1], options.padRight);\n    if (!overrideOptions.noSeparator && number[1]) number[1] = addDecimalSeparators(number[1], options.decimalsSeparator);\n    if (!overrideOptions.noSeparator && number[0]) number[0] = addIntegerSeparators(number[0], options.integerSeparator);\n    output.push(number[0]);\n    if (number[1]) {\n      output.push(options.decimal);\n      output.push(number[1]);\n    }\n\n    //Prepare output with right hand negative and/or prefix\n    if (options.negativeRightOut && !overrideOptions.noUnits) {\n      output.push(options.suffix);\n    }\n    if (negative) {\n      output.push(options.negativeRightSymbol);\n    }\n    if (!options.negativeRightOut && !overrideOptions.noUnits) {\n      output.push(options.suffix);\n    }\n\n    //join output and return\n    return output.join('');\n  }\n\n  format.negative = options.negative;\n  format.negativeOut = options.negativeOut;\n  format.negativeType = options.negativeType;\n  format.negativeLeftOut = options.negativeLeftOut;\n  format.negativeLeftSymbol = options.negativeLeftSymbol;\n  format.negativeRightOut = options.negativeRightOut;\n  format.negativeRightSymbol = options.negativeRightSymbol;\n  format.prefix = options.prefix;\n  format.suffix = options.suffix;\n  format.separate = options.separate;\n  format.integerSeparator = options.integerSeparator;\n  format.decimalsSeparator = options.decimalsSeparator;\n  format.decimal = options.decimal;\n  format.padLeft = options.padLeft;\n  format.padRight = options.padRight;\n  format.truncate = options.truncate;\n  format.round = options.round;\n\n  function unformat(number, allowedSeparators) {\n    allowedSeparators = allowedSeparators || [];\n    if (options.allowedSeparators) {\n      options.allowedSeparators.forEach(function (s) { allowedSeparators.push (s); });\n    }\n    allowedSeparators.push(options.integerSeparator);\n    allowedSeparators.push(options.decimalsSeparator);\n    number = number.replace(options.prefix, '');\n    number = number.replace(options.suffix, '');\n    var newNumber = number;\n    do {\n      number = newNumber;\n      for (var i = 0; i < allowedSeparators.length; i++) {\n        newNumber = newNumber.replace(allowedSeparators[i], '');\n      }\n    } while (newNumber != number);\n    return number;\n  }\n  format.unformat = unformat;\n\n  function validate(number, allowedSeparators) {\n    number = unformat(number, allowedSeparators);\n    number = number.split(options.decimal);\n    if (number.length > 2) {\n      return false;\n    } else if (options.truncate != null && number[1] && number[1].length > options.truncate) {\n      return false;\n    }  else if (options.round != null && number[1] && number[1].length > options.round) {\n      return false;\n    } else {\n      return /^-?\\d+\\.?\\d*$/.test(number);\n    }\n  }\n  return format;\n}\n\n//where x is already the integer part of the number\nfunction addIntegerSeparators(x, separator) {\n  x += '';\n  if (!separator) return x;\n  var rgx = /(\\d+)(\\d{3})/;\n  while (rgx.test(x)) {\n    x = x.replace(rgx, '$1' + separator + '$2');\n  }\n  return x;\n}\n\n//where x is already the decimal part of the number\nfunction addDecimalSeparators(x, separator) {\n  x += '';\n  if (!separator) return x;\n  var rgx = /(\\d{3})(\\d+)/;\n  while (rgx.test(x)) {\n    x = x.replace(rgx, '$1' + separator + '$2');\n  }\n  return x;\n}\n\n//where x is the integer part of the number\nfunction padLeft(x, padding) {\n  x = x + '';\n  var buf = [];\n  while (buf.length + x.length < padding) {\n    buf.push('0');\n  }\n  return buf.join('') + x;\n}\n\n//where x is the decimals part of the number\nfunction padRight(x, padding) {\n  if (x) {\n    x += '';\n  } else {\n    x = '';\n  }\n  var buf = [];\n  while (buf.length + x.length < padding) {\n    buf.push('0');\n  }\n  return x + buf.join('');\n}\nfunction truncate(x, length) {\n  if (x) {\n    x += '';\n  }\n  if (x && x.length > length) {\n    return x.substr(0, length);\n  } else {\n    return x;\n  }\n}\n\n//where number is an array with 0th item as integer string and 1st item as decimal string (no negatives)\nfunction round(number, places) {\n  if (number[1] && places >= 0 && number[1].length > places) {\n    //truncate to correct number of decimal places\n    var decim = number[1].slice(0, places);\n    //if next digit was >= 5 we need to round up\n    if (+(number[1].substr(places, 1)) >= 5) {\n      //But first count leading zeros as converting to a number will loose them\n      var leadingzeros = \"\";\n      while (decim.charAt(0)===\"0\") {\n        leadingzeros = leadingzeros + \"0\";\n        decim = decim.substr(1);\n      }\n      //Then we can change decim to a number and add 1 before replacing leading zeros\n      decim = (+decim + 1) + '';\n      decim = leadingzeros + decim;\n      if (decim.length > places) {\n        //adding one has made it longer\n        number[0] = (+number[0]+ +decim.charAt(0)) + ''; //add value of firstchar to the integer part\n        decim = decim.substring(1);   //ignore the 1st char at the beginning which is the carry to the integer part\n      }\n    }\n    number[1] = decim;\n  }\n  return number;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/filip/code/packages/react-widgets/~/format-number/index.js\n// module id = 3\n// module chunks = 0","if (typeof module === 'function') {\n  module()\n}\n\n\n\n// WEBPACK FOOTER //\n// /home/filip/code/packages/react-widgets/tools/shim.js","module.exports = window.ReactWidgets;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"window.ReactWidgets\"\n// module id = 5\n// module chunks = 0"],"sourceRoot":""}